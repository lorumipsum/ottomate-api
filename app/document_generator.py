"""
Document Generator for OttoMate Export Packs.
"""

import json
from typing import Dict, Any
from datetime import datetime

class DocumentGenerator:
    """Generates documentation files for blueprint export packs."""
    
    def generate_proposal(self, blueprint: Dict[str, Any], brief: str) -> str:
        """Generate proposal.md from blueprint and brief."""
        
        modules = blueprint.get("modules", [])
        trigger_count = len([m for m in modules if m.get("type") == "trigger"])
        action_count = len([m for m in modules if m.get("type") == "action"])
        
        return f"""# Automation Proposal

## Overview
This automation solution was generated based on your requirements.

**Generated:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

## Original Brief
{brief}

## Proposed Solution
- **Triggers:** {trigger_count}
- **Actions:** {action_count}
- **Total Modules:** {len(modules)}

## Technical Details
- **Version:** {blueprint.get('version', 'Unknown')}
- **Blueprint ID:** {blueprint.get('triggerId', 'Unknown')}

---
*Generated by OttoMate API*
"""
    
    def generate_runbook(self, blueprint: Dict[str, Any], brief: str) -> str:
        """Generate runbook.md from blueprint."""
        
        modules = blueprint.get("modules", [])
        
        return f"""# Automation Runbook

## Overview
Operational guide for this automation workflow.

**Generated:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

## Requirements
{brief}

## Modules ({len(modules)} total)
""" + "\n".join([f"- {m.get('name', 'Unnamed')}: {m.get('type', 'Unknown')}" for m in modules]) + f"""

## Deployment Steps
1. Import blueprint into Make.com
2. Configure connections
3. Test workflow
4. Enable automation

---
*Generated by OttoMate API*
"""
    
    def generate_validation_report(self, blueprint: Dict[str, Any], lint_result: Dict[str, Any]) -> str:
        """Generate validation_report.md from blueprint and lint results."""
        
        status = "✅ PASSED" if lint_result.get('ok', False) else "❌ FAILED"
        violations = lint_result.get('count', 0)
        
        return f"""# Validation Report

## Summary
**Status:** {status}
**Violations:** {violations}
**Generated:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

## Blueprint Analysis
- **Version:** {blueprint.get('version', 'Unknown')}
- **Modules:** {len(blueprint.get('modules', []))}
- **Connections:** {len(blueprint.get('connections', []))}

## Validation Details
""" + ("\n".join([f"- {v.get('rule', 'Unknown')}: {v.get('message', 'No message')}" for v in lint_result.get('violations', [])]) if violations > 0 else "All validations passed successfully.") + f"""

---
*Generated by OttoMate API*
"""

# Global instance
document_generator = DocumentGenerator()
